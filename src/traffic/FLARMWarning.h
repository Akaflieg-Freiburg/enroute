/***************************************************************************
 *   Copyright (C) 2021 by Stefan Kebekus                                  *
 *   stefan.kebekus@gmail.com                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#pragma once

#include "units/Angle.h"
#include "units/Distance.h"

namespace Traffic {

/*! \brief Traffic opponents
 *
 *  Objects of this class represent traffic opponents, as detected by FLARM and
 *  similar devices.  Instances of this class will be generated by the
 *  Navigation::FLARMAdaptor class. Consumers of this class will never have to
 *  set or construct instances of the class themselves
 */

class FLARMWarning {
    Q_GADGET

public:
    /*! \brief Default constructor
     *
     * @param parent The standard QObject parent pointer
     */
    explicit FLARMWarning() = default;


    explicit FLARMWarning(const QString& AlarmLevel,
                          const QString& RelativeBearing,
                          const QString& AlarmType,
                          const QString& RelativeVertical,
                          const QString& RelativeDistance);

    //
    // PROPERTIES
    //

    /*! \brief Alarm Level, as reported by FLARM
     *
     * This is the alarm level associated with the traffic object. Alarm levels
     * are not computed by this class, but by the FLARM device that reports the
     * traffic. This is an integer in the range 0, â€¦, 3 with the following
     * meaning.
     *
     *  - 0 = no alarm (also used for no-alarm traffic information)
     *  - 1 = alarm, 13-18 seconds to impact
     *  - 2 = alarm, 9-12 seconds to impact
     *  - 3 = alarm, 0-8 seconds to impact
     */
    Q_INVOKABLE int alarmLevel() const
    {
        return m_alarmLevel;
    }

    Q_INVOKABLE int alarmType() const
    {
        return m_alarmType;
    }

    Q_INVOKABLE QString description() const;

    Q_INVOKABLE AviationUnits::Distance hDist() const
    {
        return m_hDist;
    }

    Q_INVOKABLE bool operator==(const Traffic::FLARMWarning &rhs);

    Q_INVOKABLE AviationUnits::Angle relativeBearing() const
    {
        return m_relativeBearing;
    }

    Q_INVOKABLE AviationUnits::Distance vDist() const
    {
        return m_vDist;
    }

private:

    // Property values
    int m_alarmLevel {-1};
    int m_alarmType {-1};
    AviationUnits::Distance m_hDist;
    AviationUnits::Angle m_relativeBearing;
    AviationUnits::Distance m_vDist;
};

}

// Declare meta types
Q_DECLARE_METATYPE(Traffic::FLARMWarning)
