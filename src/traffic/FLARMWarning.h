/***************************************************************************
 *   Copyright (C) 2021 by Stefan Kebekus                                  *
 *   stefan.kebekus@gmail.com                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#pragma once

#include <QGeoPositionInfo>
#include <QTimer>

#include "units/Angle.h"
#include "units/Distance.h"

namespace Traffic {

/*! \brief Traffic opponents
 *
 *  Objects of this class represent traffic opponents, as detected by FLARM and
 *  similar devices.  Instances of this class will be generated by the
 *  Navigation::FLARMAdaptor class. Consumers of this class will never have to
 *  set or construct instances of the class themselves
 */

class FLARMWarning : public QObject {
    Q_OBJECT

public:
    /*! \brief Default constructor
     *
     * @param parent The standard QObject parent pointer
     */
    explicit FLARMWarning(QObject *parent = nullptr);


    explicit FLARMWarning(const QString& AlarmLevel,
                          const QString& RelativeBearing,
                          const QString& AlarmType,
                          const QString& RelativeVertical,
                          const QString& RelativeDistance,
                          QObject *parent = nullptr);


    // Standard destructor
    ~FLARMWarning() override = default;

    //
    // PROPERTIES
    //

    /*! \brief Alarm Level, as reported by FLARM
     *
     * This is the alarm level associated with the traffic object. Alarm levels
     * are not computed by this class, but by the FLARM device that reports the
     * traffic. This is an integer in the range 0, â€¦, 3 with the following
     * meaning.
     *
     *  - 0 = no alarm (also used for no-alarm traffic information)
     *  - 1 = alarm, 13-18 seconds to impact
     *  - 2 = alarm, 9-12 seconds to impact
     *  - 3 = alarm, 0-8 seconds to impact
     */
    Q_PROPERTY(int alarmLevel READ alarmLevel NOTIFY alarmLevelChanged)

    /*! \brief Getter method for property with the same name
     *
     *  @returns Property alarmLevel
     */
    int alarmLevel() const
    {
        return _alarmLevel;
    }

    Q_PROPERTY(AviationUnits::Angle relativeBearing READ relativeBearing NOTIFY relativeBearingChanged)

    AviationUnits::Angle relativeBearing() const
    {
        return m_relativeBearing;
    }

    Q_PROPERTY(int alarmType READ alarmType NOTIFY alarmTypeChanged)

    int alarmType() const
    {
        return _alarmType;
    }

    Q_PROPERTY(AviationUnits::Distance vDist READ vDist NOTIFY vDistChanged)

    AviationUnits::Distance vDist() const
    {
        return _vDist;
    }

    Q_PROPERTY(AviationUnits::Distance hDist READ hDist NOTIFY hDistChanged)

    AviationUnits::Distance hDist() const
    {
        return _hDist;
    }

    Q_PROPERTY(QString description READ description NOTIFY descriptionChanged)

    QString description() const
    {
        return _description;
    }


signals:
    /*! \brief Notifier signal */
    void alarmLevelChanged();

    /*! \brief Notifier signal */
    void alarmTypeChanged();

    /*! \brief Notifier signal */
    void hDistChanged();

    /*! \brief Notifier signal */
    void vDistChanged();

    /*! \brief Notifier signal */
    void validChanged();

    /*! \brief Notifier signal */
    void relativeBearingChanged();

    void descriptionChanged();

public slots:
    void copyFrom(const Traffic::FLARMWarning &other);

private:
    void updateDescription();

private:
    //
    // Property values
    //
    int _alarmLevel {-1};
    int _alarmType {-1};
    AviationUnits::Distance _hDist;
    AviationUnits::Angle m_relativeBearing;
    AviationUnits::Distance _vDist;

    QString _description {};

    // Timer for timeout. Traffic objects become invalid if their data has not been
    // refreshed for timeoutMS milliseconds
    QTimer timeoutCounter;
    static constexpr qint64 timeoutMS = 10*1000;
};

}
