# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools


default_platform(:android)

platform :android do
  desc "Build Android Binary"
  lane :build do
    # Clean up previous builds
    FileUtils.rm_rf('../build/build-android-release')
    FileUtils.rm_rf('../build/enroute.apk')
    FileUtils.rm_rf('../build/enroute.aab')

    # Configure CMake build
    UI.message('Configuring CMake build...')
    qt6_android_dir = ENV['Qt6_DIR_ANDROID']
    cmake_config_cmd = [
      "#{qt6_android_dir}_x86_64/bin/qt-cmake",
      '-DCMAKE_BUILD_TYPE:STRING=Release',
      '-DQT_ANDROID_BUILD_ALL_ABIS=ON',
      '-DQT_ANDROID_SIGN_APK=ON',
      '-DQT_ANDROID_SIGN_AAB=ON',
      '-S ..',
      '-B ../build/build-android-release'
    ].join(' ')
    sh(cmake_config_cmd)

    # Build APK
    UI.message('Building and Signing Android Package...')
    sh('cmake --build ../build/build-android-release --target apk')
    apk_source = '../build/build-android-release/src/android-build/build/outputs/apk/release/android-build-release-signed.apk'
    apk_dest = '../build/enroute.apk'
    FileUtils.mv(apk_source, apk_dest)

    # Build AAB
    UI.message('Building and Signing Android App Bundle...')
    sh('cmake --build ../build/build-android-release --target aab')
    aab_source = '../build/build-android-release/src/android-build/build/outputs/bundle/release/android-build-release.aab'
    aab_dest = '../build/enroute.aab'
    FileUtils.mv(aab_source, aab_dest)

    # Verify and provide output path
    UI.success("Signed APK file is available at #{File.expand_path(apk_dest)}")
    UI.success("Signed AAB file is available at #{File.expand_path(aab_dest)}")
  end

  desc "Updata Meta Data for Google Play"
  lane :metadata do
    # Update Changelog files
    matches = File.read("../CHANGELOG.md").scan(/^## \s*\[?(.*?)\]?\s*-\s*.*?\n(.*?)(?=^## |\z)/m)
    latest_version, changelog_text = matches.first
    major, minor, patch = latest_version.split('.').map(&:to_i)
    version_code = 100000 * major + 1000 * minor + 10 * patch
    File.write("metadata/android/en-US/#{version_code}.txt", changelog_text.strip)      
  end

  desc "Validate a new version with Google Play"
  lane :validate do
    build
    metadata
    upload_to_play_store(aab: 'build/enroute.aab', track: 'beta', validate_only: true)
  end

  desc "Deploy a new version to Google Play - Beta"
  lane :deployBeta do
    build
    metadata
    upload_to_play_store(aab: 'build/enroute.aab', track: 'beta')
  end

  desc "Promote Beta to Release"
  lane :promoteBetaToRelease do
    matches = File.read("../CHANGELOG.md").scan(/^## \s*\[?(.*?)\]?\s*-\s*.*?\n(.*?)(?=^## |\z)/m)
    latest_version, changelog_text = matches.first
    major, minor, patch = latest_version.split('.').map(&:to_i)
    version_code = 100000 * major + 1000 * minor + 10 * patch
    upload_to_play_store(track: 'beta', track_promote_to: 'production', version_code: "#{version_code}")
  end
end

platform :mac do
  desc "Build macOS Bundle"
  lane :build do
    # Clean up previous builds
    FileUtils.rm_rf('../build/build-macos-release')
    FileUtils.rm_rf('../build/enroute.app')

    UI.message('Configuring CMake build...')
    qt6_macos_dir = ENV['Qt6_DIR_MACOS']
    sh("#{qt6_macos_dir}/bin/qt-cmake",
      '-G Ninja',
      '-DCMAKE_BUILD_TYPE:STRING=Release',
      '-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64',
      '-DCMAKE_INSTALL_PREFIX=../build/',
      '-DQTDEPLOY=ON',
      '-S ..',
      '-B ../build/build-macos-release'
    )

    UI.message('Building macOS Binary...')
    sh('cmake --build ../build/build-macos-release')

    UI.message('Compile MacOS Bundle and Sign ...')
    sh('cmake --build ../build/build-macos-release --target install')
  end

end

desc "Create GitHub Release, using SSH authentication"
lane :gitHubRelease do
  # Build Android APK and AAB
  sh("fastlane android build")

  # Extract version info from CHANGELOG.md
  matches = File.read("../CHANGELOG.md").scan(/^## \s*\[?(.*?)\]?\s*-\s*.*?\n(.*?)(?=^## |\z)/m)
  latest_version, changelog_text = matches.first
  
  # Ensure we have a valid version
  if latest_version.nil? || latest_version.empty?
    UI.user_error!("Could not find version information in CHANGELOG.md")
  end
  
  # Get the current git tag
  current_tag = "v#{latest_version}"
  
  # Create the release using the GitHub CLI (gh)
  # First check if gh CLI is installed
  unless system("which gh > /dev/null 2>&1")
    UI.user_error!("GitHub CLI not found. Please install it: https://cli.github.com/")
  end
  
  # Create a notes file for the release
  notes_file = "/tmp/release_notes_#{latest_version}.md"
  File.write(notes_file, changelog_text.strip)
  
  # Create the release using GitHub CLI (uses SSH authentication)
  UI.message("Creating GitHub release for version #{latest_version}")
  sh("gh release create #{current_tag} --title 'Version #{latest_version}' --notes-file #{notes_file}")
  
  # Add assets to the release
  UI.message("Uploading Android APK and AAB files")
  sh("gh release upload #{current_tag} ../build/enroute.apk ../build/enroute.aab")
  
  # Clean up
  FileUtils.rm(notes_file)
  
  UI.success("Successfully created GitHub release for #{latest_version}")
  UI.success("Release URL: https://github.com/YOUR_USERNAME/YOUR_REPO/releases/tag/#{current_tag}")
end

desc "Create Flathub test build for release"
lane :flathubRelease do
  # Clean up previous builds
  FileUtils.rm_rf('../build/build-linux-release')
  
  # Configure CMake build
  qt6_linux_dir = ENV['Qt6_DIR_LINUX']
  cmake_config_cmd = [
    "#{qt6_linux_dir}/bin/qt-cmake",
    '-G Ninja',
    '-DCMAKE_BUILD_TYPE:STRING=Release',
    '-S ..',
    '-B ../build/build-linux-release'
  ].join(' ')
  
  # Execute CMake configuration
  sh(cmake_config_cmd)
  
  manifest_path = '../build/build-linux-release/packaging/flatpak/de.akaflieg_freiburg.enroute.json'
 
  # Get current git commit hash
  commit_hash = sh("git rev-parse --short HEAD").strip
  
  # Clone Flathub repository
  flathub_repo = "flathub/de.akaflieg_freiburg.enroute"
  clone_folder = "../flathub-repo"
  
  # Remove existing clone if present
  FileUtils.rm_rf(clone_folder)
  
  # Clone the repository
  sh("git clone git@github.com:#{flathub_repo}.git #{clone_folder}")
  
  # Create a new branch
  branch_name = "update-#{commit_hash}"
  
  Dir.chdir(clone_folder) do
    sh("git checkout -b #{branch_name}")
  
    # Copy the new manifest
    FileUtils.cp(manifest_path, "de.akaflieg_freiburg.enroute.json")
    
    # Commit changes
    sh("git add de.akaflieg_freiburg.enroute.json")
    sh("git commit -m 'Update manifest to commit #{commit_hash}'")
    
    # Push branch
    sh("git push --set-upstream origin #{branch_name}")
  end
  
  # Create Pull Request using GitHub API
  github_api_token = ENV["GITHUB_TOKEN"]
  
  # Ensure GitHub token is available
  #unless github_api_token
  #  UI.user_error!("Please set the GITHUB_TOKEN environment variable")
  #end
  
  # Get the commit message for additional context
  commit_message = sh("git log -1 --pretty=%B").strip 

  # Create PR using gh CLI
  Dir.chdir(clone_folder) do
    pr_body = "Updates the Flatpak manifest to latest commit #{commit_hash}\n\nSource commit message: #{commit_message}"
    sh("gh pr create --title 'Update manifest to #{commit_hash}' --body '#{pr_body}' --base master --head #{branch_name}")
  end
  
  # Clean up
  FileUtils.rm_rf(clone_folder)
end
